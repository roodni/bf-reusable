let fix = fun f ->
  let g = fun x -> f (fun y -> x x y) in
  g g

let gen_switch_nat = fun sel blocks default -> [
  *fix
    (fun loop i blocks ->
      match blocks with
      | nil -> [
          + sel i
          *default
        ]
      | block :: rest -> [
          ? sel [
            - sel
            *loop (i + 1) rest
          ] [
            + sel i
            *block
          ]
        ]
      end)
    0 blocks
]


main {
  b: cell;
  f: cell;
  r: cell;
  x: cell;
} in

+ b 'B'
+ f 'F'
+ r 'R'

, x
- x '0'

*gen_switch_nat x
  ( [ # case 0
      . b
    ] ::
    [ # case 1
      . f
    ] ::
    [ # case 2
      . r
    ] :: nil )
  [ # default
    + x '0'
    . x
  ]