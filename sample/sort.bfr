let fix = fun f ->
  let g = fun x -> f (fun y -> x x y) in
  g g

let sort = fun compare l ->
  fix
    (fun sort -> fun rest sorted ->
      match rest with
      | nil -> sorted
      | pivot :: rest ->
          fix
            (fun partition -> fun left right l ->
              match l with
              | nil -> sort left (pivot :: sort right sorted)
              | hd :: tl ->
                  if compare hd pivot < 0
                  then partition (hd :: left) right tl
                  else partition left (hd :: right) tl)
            nil nil rest)
    l nil

let puti = fun n -> [
  $var { x: cell; } in
  + x '0'
  *fix (fun loop n -> [
    $let rest = n / 10 in
    $let digit = n mod 10 in
    *(if rest = 0 then []
      else loop rest )
    + x (digit - rest mod 10)
    . x
  ]) n
]

let dump_ilist = fun l ->
  fix
    (fun iter l ->
      match l with
      | nil -> []
      | hd :: tl -> [
          *puti hd
          *iter tl
        ])
    l

main {} [
  $let compare = fun x y -> x - y in
  $let l = sort compare (3; 7; 5; 6; 4) in
  *dump_ilist l
]
