# brainfuckインタプリタ
# 入力の形式は以下の通り:
# brainfuckのコード \(バックスラッシュ) 入力

# 不動点コンビネータ
let fix = fun f ->
  let g = fun x -> f (fun y -> x x y) in
  g g

# リスト l を比較関数 compare でソートする
let sort = fun compare l ->
  fix
    (fun sort -> fun rest sorted ->
      match rest with
      | nil -> sorted
      | pivot :: rest ->
          fix
            (fun partition -> fun left right l ->
              match l with
              | nil -> sort left (pivot :: sort right sorted)
              | hd :: tl ->
                  if compare hd pivot < 0
                  then partition (hd :: left) right tl
                  else partition left (hd :: right) tl
              end)
            nil nil rest
      end)
    l nil

# セル x をゼロにする
let gen_del = fun x -> [
  ! x [ - x ]
]

# セル dest からセル src の値だけ引く
# src はゼロになる
# オーバーフローするときブロック overflow を実行する
let gen_sub_safe = fun src dest overflow -> [
  ! src [
    - src
    ? dest [ - dest ] [
      *overflow
      *gen_del src
    ]
  ]
]

# セル sel の値で分岐する
# sel は破壊される
# 整数とブロックのペアのリスト cases の各要素のペアの整数を小さい順に見て
# sel の値と同じであればブロックを実行する
# 該当するものがなければブロック default を実行する
# ブロック中で sel の値が変化しても良い
let gen_switch = fun sel cases default -> [
  $let cases = sort (fun c1 c2 -> fst c1 - fst c2) cases in
  $var {
    sub_src: cell;
    flag_eq: cell;
    flag_els: cell;
  } in
  *fix
    (fun loop prev cases ->
      match cases with
      | nil -> default
      | case :: cases -> [
          $let num = fst case in
          $let block = snd case in
          + sub_src (num - prev)
          + flag_eq
          *gen_sub_safe sub_src sel [ - flag_eq ]
          ? sel [ - flag_eq ] []
          + flag_els
          ! flag_eq [
            - flag_eq
            - flag_els
            *block
          ]
          ! flag_els [
            - flag_els
            *loop num cases
          ]
        ]
      end)
    0 cases
]


# セル dest にセル src の値を足す
# srcはゼロになる
let gen_add = fun src dest -> [
  ! src [ - src + dest ]
]


# セルと係数のペアのリスト dest_and_coef_list の各要素のセルに対して
# セル src の値に係数をかけた数を足す
# セル src はゼロになる
let gen_add_multi = fun src dest_and_coef_list -> [
  ! src [
    - src
    *fix
      (fun loop l ->
        match l with
        | nil -> []
        | h :: l -> [
            $let dest = fst h in
            $let coef = snd h in
            + dest coef
            *loop l
          ]
        end)
      dest_and_coef_list
  ]
]

# gen_add_multi と同様
# ただしセル src は復元される
let gen_add_multi_restore = fun src dest_and_coef_list -> [
  $var { backup: cell; } in
  *gen_add_multi src ((backup, 1) :: dest_and_coef_list)
  *gen_add backup src
]

# セル dest にセル src の値を足す
# src は復元される
let gen_add_restore = fun src dest -> [
  *gen_add_multi_restore src ((dest, 1) :: nil)
]

# セル x の値を数値 n にする
let gen_set = fun x n -> [
  *gen_del x
  + x n
]

# セル sel の値で分岐する
# sel は分岐の前に復元される
# sel の値を i とする。ブロックのリスト blocks の
#  第 i 要素が存在する場合それを実行する
#  第 i 要素が存在しない場合ブロック default を実行する
# ブロック中で sel の値が変化しても良い
let gen_switch_nat = fun sel blocks default -> [
  *fix
    (fun loop i blocks ->
      match blocks with
      | nil -> [
          + sel i
          *default
        ]
      | block :: rest -> [
          ? sel [
            - sel
            *loop (i + 1) rest
          ] [
            + sel i
            *block
          ]
        ]
      end)
    0 blocks
]


main {
  code: array_unlimited {
    inst: cell;
    depth: cell;
    p: ptr;
  };
  tape: array_unlimited {
    v: cell;
    p: ptr;
  };
} in

# コード入力
$dive code@p [
  $let p = code@p in
  $var {
    cont: cell;
    flag_next: cell;
  } in
  + cont
  ! cont [
    , p:inst
    + flag_next
    *gen_switch p:inst
      ( ('+', [ *gen_set p:inst 1 ]) ::
        ('-', [ *gen_set p:inst 2 ]) ::
        ('>', [ *gen_set p:inst 3 ]) ::
        ('<', [ *gen_set p:inst 4 ]) ::
        ('[', [
          *gen_set p:inst 5
          + p:(1)depth
        ]) ::
        (']', [
          *gen_set p:inst 6
           - p:depth
        ]) ::
        ('.', [ *gen_set p:inst 7 ]) ::
        (',', [ *gen_set p:inst 8 ]) ::
        ('\\', [
          - flag_next
          - cont
        ]) :: nil )
      [ - flag_next ]
    ! flag_next [
      - flag_next
      *gen_add_restore p:depth p:(1)depth
      > p
    ]
  ]
]

! code@p [ < code@p ]

# 実行
$dive code@p [
  $let p = code@p in
  $var {
    depth_cur: cell;
  } in
  ! p:inst [
    *gen_switch_nat p:inst
      ( [] ::
        [ + tape@p:v ] ::
        [ - tape@p:v ] ::
        [ > tape@p ] ::
        [ < tape@p ] ::
        [ # while
          ? tape@p:v [] [
            *gen_add_multi_restore p:depth
              ( (depth_cur, 1) ::
                (p:(1)depth, -1) :: nil )
            > p
            ! p:depth [
              *gen_add_multi_restore depth_cur
                ( (p:depth, 1) ::
                  (p:(1)depth, -1) :: nil )
              > p
            ]
            *gen_add depth_cur p:depth
          ]
        ] ::
        [ # wend
          *gen_add_multi_restore p:depth
            ( (depth_cur, 1) ::
              (p:(-1)depth, -1) :: nil )
          < p
          ! p:depth [
            *gen_add_multi_restore depth_cur
              ( (p:depth, 1) ::
                (p:(-1)depth, -1) :: nil )
            < p
          ]
          *gen_add depth_cur p:depth
          < p
        ] ::
        [ . tape@p:v ] :: nil )
      [ , tape@p:v ]
    > p
  ]
]