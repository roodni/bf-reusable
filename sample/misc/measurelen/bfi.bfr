(* brainfuckインタプリタ
   入力の形式:
     {brainfuckのコード}\{入力}
*)

open import "./bfilib.bfr"


codegen $

// コード入力
$build {
  code: array(_) {
    inst: cell;
    depth: cell;
    p: index;
  }
}

*dive code@p [
  **let p = code@p in $
  $alloc {
    cont; flag_next
  }
  + cont
  ! cont [
    , p:inst
    + flag_next
    *gen_switch p:inst
      { ('+', [ *gen_set p:inst 1 ]);
        ('-', [ *gen_set p:inst 2 ]);
        ('>', [ *gen_set p:inst 3 ]);
        ('<', [ *gen_set p:inst 4 ]);
        ('[', [
          *gen_set p:inst 5
          + p:(1)depth
        ]);
        (']', [
          *gen_set p:inst 6
          - p:depth
        ]);
        ('.', [ *gen_set p:inst 7 ]);
        (',', [ *gen_set p:inst 8 ]);
        ('\\', [
          - flag_next
          - cont
        ]);
      }
      [ - flag_next ]
    ! flag_next [
      - flag_next
      *gen_add_restore p:depth p:(1)depth
      > p
    ]
  ]
]

<!> code@p [ < code@p ]


// 実行
$build {
  tape: array(_) {
    v: cell;
    p: index;
  }
}

**let p = code@p in $
*dive p [
  $alloc { depth_cur }
  ! p:inst [
    *gen_switch_nat p:inst
      { [];
        [ + tape@p:v ];
        [ - tape@p:v ];
        [ > tape@p ];
        [ < tape@p ];
        [ // while
          ? tape@p:v [] [
            *gen_add_multi_restore p:depth
              { (depth_cur, 1);
                (p:(1)depth, -1) }
            > p
            ! p:depth [
              *gen_add_multi_restore depth_cur
                { (p:depth, 1);
                  (p:(1)depth, -1) }
              > p
            ]
            *gen_add depth_cur p:depth
          ]
        ];
        [ // wend
          *gen_add_multi_restore p:depth
            { (depth_cur, 1);
              (p:(-1)depth, -1) }
          < p
          ! p:depth [
            *gen_add_multi_restore depth_cur
              { (p:depth, 1);
                (p:(-1)depth, -1) }
            < p
          ]
          *gen_add depth_cur p:depth
          < p
        ];
        [ . tape@p:v ];
      }
      [ , tape@p:v ]
    > p
  ]
]