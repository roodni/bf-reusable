// brainfuckインタプリタを実装するために用意した汎用関数群

// 不動点コンビネータ
let fix f =
  let g x = f (fun y -> x x y) in
  g g

// リスト l を比較関数 compare でソートする
let sort compare l =
  fix
    (fun sort -> fun rest sorted ->
      match rest with
      | () -> sorted
      | pivot . rest ->
          fix
            (fun partition -> fun left right l ->
              match l with
              | () -> sort left (pivot . sort right sorted)
              | hd . tl ->
                  if compare hd pivot < 0
                  then partition (hd . left) right tl
                  else partition left (hd . right) tl)
            () () rest)
    l ()

// セル x の中身をゼロにする
let gen_del x = [
  ! x [ - x ]
]

// セル dest からセル src の中身だけ引く
// src はゼロになる
// オーバーフローするときブロック overflow を実行する
let gen_sub_safe src dest overflow = [
  ! src [
    - src
    ? dest [ - dest ] [
      *overflow
      *gen_del src
    ]
  ]
]

(* セル sel の中身で分岐する
   sel は破壊される
   整数とブロックのペアのリスト cases の各要素のペアの整数を小さい順に見て
   sel の中身と同じであればブロックを実行する
   該当するものがなければブロック default を実行する
   ブロック中で sel の中身が変化しても良い
*)
let gen_switch sel cases default = [
  **let cases =
    sort (fun (n1, _) (n2, _) -> n1 - n2) cases
  in $
  $alloc {
    sub_src; flag_eq; flag_els
  }
  *fix
    (fun loop prev cases ->
      match cases with
      | () -> default
      | (num, block) . cases -> [
          + sub_src (num - prev)
          + flag_eq
          *gen_sub_safe sub_src sel [ - flag_eq ]
          ? sel [ - flag_eq ] []
          + flag_els
          ! flag_eq [
            - flag_eq
            - flag_els
            *block
          ]
          ! flag_els [
            - flag_els
            *loop num cases
          ]
        ])
    0 cases
]


// セル dest にセル src の中身を足す
// srcはゼロになる
let gen_add src dest = [
  ! src [ - src + dest ]
]


// セルと係数のペアのリスト dest_and_coef_list の各要素のセルに対して
// セル src の中身に係数をかけた数を足す
// セル src の中身はゼロになる
let gen_add_multi src dest_and_coef_list = [
  ! src [
    - src
    *fix
      (fun loop l ->
        match l with
        | () -> []
        | (dest, coef) . l -> [
            + dest coef
            *loop l
          ])
      dest_and_coef_list
  ]
]

// gen_add_multi と同様
// ただしセル src は復元される
let gen_add_multi_restore src dest_and_coef_list = [
  $alloc { backup }
  *gen_add_multi src ((backup, 1) . dest_and_coef_list)
  *gen_add backup src
]

// セル dest にセル src の中身を足す
// src は復元される
let gen_add_restore src dest = [
  *gen_add_multi_restore src ((dest, 1);)
]

// セル x の中身を数値 n にする
let gen_set x n = [
  *gen_del x
  + x n
]

(* セル sel の中身で分岐する
   sel は分岐の前に復元される
   sel の中身を i とする。ブロックのリスト blocks の
   第 i 要素が存在する場合それを実行する
   第 i 要素が存在しない場合ブロック default を実行する
   ブロック中で sel の中身が変化しても良い
*)
let gen_switch_nat sel blocks default = [
  *fix
    (fun loop i blocks ->
      match blocks with
      | () -> [
          + sel i
          *default
        ]
      | block . rest -> [
          ? sel [
            - sel
            *loop (i + 1) rest
          ] [
            + sel i
            *block
          ]
        ])
    0 blocks
]