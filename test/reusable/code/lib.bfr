let fix f =
  let g x = f (fun y -> x x y) in
  g g

let gen_del x = [
  ! x [ - x ]
]

let gen_repeat src block = [
  ! src [
     - src
     *block
  ]
]

let gen_repeat_restore src block = [
  $alloc { backup: cell; } in
  *gen_repeat src [
    + backup
    *block
  ]
  *gen_repeat backup [ + src ]
]

let gen_add_multi src dest k = [
  *gen_repeat src [
    + dest k
  ]
]


let gen_reset_index i = [
  ! i [ < i ]
]

let gen_set_index src i = [
  *gen_reset_index i
  *gen_repeat src [ > i ]
]


let gen_input dest ed = [
  $alloc { x: cell; } in
  , x
  - x ed
  ! x [
    - x ('0' - ed)
    *gen_repeat dest [ + x 10 ]
    *gen_repeat x [ + dest ]
    , x
    - x ed
  ]
]

let gen_puts = fun l -> [
  $alloc { c: cell; } in
  *fix
    (fun loop prev l ->
      match l with
      | nil -> []
      | hd :: tl -> [
          + c (hd - prev)
          . c
          *loop hd tl
        ])
    0 l
]