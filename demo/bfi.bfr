main {
  code: list_unlimited {
    inst: cell;
    depth: cell;
    p: ptr;
  };
  tape: list_unlimited {
    v: cell;
    p: ptr;
  };
} in

# 不動点コンビネータ
$let fix = fun f x ->
  let fix = fun self f x ->
    f (self self f) x
  in
  fix fix f x
in

$let sort = fun compare l ->
  fix (fun sort -> fun rest sorted ->
    match rest with
    | nil -> sorted
    | pivot :: rest ->
        fix (fun partition -> fun left right l ->
          match l with
          | nil -> sort left (pivot :: sort right sorted)
          | hd :: tl ->
              if compare hd pivot < 0
              then partition (hd :: left) right tl
              else partition left (hd :: right) tl
          end
        ) nil nil rest
    end
  ) l nil
in

$let gen_del = fun x -> [
  ! x [ - x ]
] in

# セル src からセル dest の値だけ引く
# src は破壊される
# オーバーフローするときブロック overflow が実行される
$let gen_sub_safe = fun src dest overflow -> [
  ! src [
    - src
    ? dest [ - dest ] [
      *overflow
      *gen_del src
    ]
  ]
] in

# セル sel の値で分岐する
# sel は破壊される
# 整数とブロックのペアのリスト cases の各要素のペアの第1要素の整数を小さい順に見て
# sel の値と同じであれば第2要素のブロックを実行する
# 該当するものがなければブロック default が実行される
$let gen_switch = fun sel cases default -> [
  $let cases = sort (fun c1 c2 -> fst c1 - fst c2) cases in
  $var {
    sub_src: cell;
    flag_eq: cell;
    flag_els: cell;
  } in
  *fix (fun loop prev cases ->
    match cases with
    | nil -> default
    | case :: cases -> [
        $let num = fst case in
        $let block = snd case in
        + sub_src (num - prev)
        + flag_eq
        *gen_sub_safe sub_src sel [ - flag_eq ]
        ? sel [ - flag_eq ] []
        + flag_els
        ! flag_eq [
          - flag_eq
          - flag_els
          *block
        ]
        ! flag_els [
          - flag_els
          *loop num cases
        ]
      ]
    end
  ) 0 cases
] in

$let gen_add = fun src dest -> [
  ! src [ - src + dest ]
] in

$let gen_add_multi = fun src dest_and_coef_list -> [
  ! src [
    - src
    *fix (fun loop l ->
      match l with
      | nil -> []
      | h :: l -> [
          $let dest = fst h in
          $let coef = snd h in
          + dest coef
          *loop l
        ]
      end
    ) dest_and_coef_list
  ]
] in

$let gen_add_multi_restore = fun src dest_and_coef_list -> [
  $var { backup: cell; } in
  *gen_add_multi src ((backup, 1) :: dest_and_coef_list)
  *gen_add backup src
] in

# セル dest にセル src の値を足す
# src は復元される
$let gen_add_restore = fun src dest -> [
  $var { backup: cell; } in
  ! src [
    - src
    + backup
    + dest
  ]
  ! backup [
    - backup
    + src
  ]
] in

$let gen_set = fun x n -> [
  *gen_del x
  + x n
] in

$let gen_switch_nat = fun sel blocks default -> [
  *fix (fun loop i blocks ->
    match blocks with
    | nil -> [
        + sel i
        *default
      ]
    | block :: rest -> [
        ? sel [
          - sel
          *loop (i + 1) rest
        ] [
          + sel i
          *block
        ]
      ]
    end
  ) 0 blocks
] in



# コード入力
$dive code@p [
  $let p = code@p in
  $var {
    cont: cell;
    flag_next: cell;
  } in
  + cont
  ! cont [
    , p:inst
    + flag_next
    *gen_switch p:inst (
      ('+', [
        *gen_set p:inst 1
      ]) ::
      ('-', [
        *gen_set p:inst 2
      ]) ::
      ('>', [
        *gen_set p:inst 3
      ]) ::
      ('<', [
        *gen_set p:inst 4
      ]) ::
      ('[', [
        *gen_set p:inst 5
        + p:(1)depth
      ]) ::
      (']', [
        *gen_set p:inst 6
        - p:depth
      ]) ::
      ('.', [
        *gen_set p:inst 7
      ]) ::
      (',', [
        *gen_set p:inst 8
      ]) ::
      ('\\', [
        - flag_next
        - cont
      ]) :: nil
    ) [ - flag_next ]
    ! flag_next [
      - flag_next
      *gen_add_restore p:depth p:(1)depth
      > p
    ]
  ]
]

! code@p [ < code@p ]

# 実行
$dive code@p [
  $let p = code@p in
  $var {
    depth_cur: cell;
  } in
  ! p:inst [
    *gen_switch_nat p:inst (
      [] ::
      [ + tape@p:v ] ::
      [ - tape@p:v ] ::
      [ > tape@p ] ::
      [ < tape@p ] ::
      [ # while
        ? tape@p:v [] [
          *gen_add_multi_restore p:depth (
            (depth_cur, 1) ::
            (p:(1)depth, -1) :: nil
          )
          > p
          ! p:depth [
            *gen_add_multi_restore depth_cur (
              (p:depth, 1) ::
              (p:(1)depth, -1) :: nil
            )
            > p
          ]
          *gen_add depth_cur p:depth
        ]
      ] ::
      [ # wend
        *gen_add_multi_restore p:depth (
          (depth_cur, 1) ::
          (p:(-1)depth, -1) :: nil
        )
        < p
        ! p:depth [
          *gen_add_multi_restore depth_cur (
            (p:depth, 1) ::
            (p:(-1)depth, -1) :: nil
          )
          < p
        ]
        *gen_add depth_cur p:depth
        < p
      ] ::
      [ . tape@p:v ] :: nil
    ) [ , tape@p:v ]
    > p
  ]
]